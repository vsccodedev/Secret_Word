{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vitor\\\\OneDrive\\\\Desktop\\\\React\\\\6_SECRET_WORD\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// CSS\nimport \"./App.css\";\n\n// React\nimport { useCallback, useEffect, useState } from \"react\";\n\n// data\nimport { wordsList } from \"./data/words\";\n\n// components\nimport StartScreen from \"./components/StartScreen\";\nimport Game from \"./components/Game\";\nimport GameOver from \"./components/GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 1,\n  name: \"start\"\n}, {\n  id: 2,\n  name: \"game\"\n}, {\n  id: 3,\n  name: \"end\"\n}];\nconst guessesQty = 3;\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(guessesQty);\n  const [score, setScore] = useState(0);\n  const pickWordAndCategory = useCallback(() => {\n    // pick a random category\n    const categories = Object.keys(words);\n    const category = categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // pick a random word\n    const word = words[category][Math.floor(Math.random() * words[category].length)];\n    return {\n      word,\n      category\n    };\n  }, [words]);\n\n  // starts the secret word game\n  const startGame = useCallback(() => {\n    // clear all letters\n    clearLetterStates();\n\n    // pick word and pick category\n    const {\n      word,\n      category\n    } = pickWordAndCategory();\n\n    // create an aray of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n\n    // fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setSco;\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process the letter input\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase();\n\n    // check if letter has already been utilized\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    }\n\n    //push guessed letter or remove a guess\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, normalizedLetter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [...actualWrongLetters, normalizedLetter]);\n      setGuesses(actualGuesses => actualGuesses - 1);\n    }\n  };\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  // check if guesses ended\n  useEffect(() => {\n    if (guesses <= 0) {\n      // reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  // check win condition\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n\n    // win condition\n    if (guessedLetters.length === uniqueLetters.length) {\n      // add score\n      setScore(actualScore => actualScore += 100);\n\n      // restart game with new word\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame]);\n\n  // restarts the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(guessesQty);\n    setGameStage(stages[0].name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    }, this), gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guesses: guesses,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(GameOver, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"b+SuHS5L54VcDfy+EJ8AJ93w73Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordsList","StartScreen","Game","GameOver","jsxDEV","_jsxDEV","stages","id","name","guessesQty","App","_s","gameStage","setGameStage","words","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guesses","setGuesses","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","word","startGame","clearLetterStates","wordLetters","split","map","l","toLowerCase","setSco","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuesses","uniqueLetters","Set","actualScore","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vitor/OneDrive/Desktop/React/6_SECRET_WORD/secretword/src/App.js"],"sourcesContent":["// CSS\nimport \"./App.css\";\n\n// React\nimport { useCallback, useEffect, useState } from \"react\";\n\n// data\nimport { wordsList } from \"./data/words\";\n\n// components\nimport StartScreen from \"./components/StartScreen\";\nimport Game from \"./components/Game\";\nimport GameOver from \"./components/GameOver\";\n\nconst stages = [\n  { id: 1, name: \"start\" },\n  { id: 2, name: \"game\" },\n  { id: 3, name: \"end\" },\n];\n\nconst guessesQty = 3;\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guesses, setGuesses] = useState(guessesQty);\n  const [score, setScore] = useState(0);\n\n  const pickWordAndCategory = useCallback(() => {\n    // pick a random category\n    const categories = Object.keys(words);\n    const category =\n      categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // pick a random word\n    const word =\n      words[category][Math.floor(Math.random() * words[category].length)];\n\n\n    return { word, category };\n  }, [words]);\n\n  // starts the secret word game\n  const startGame = useCallback(() => {\n    // clear all letters\n    clearLetterStates();\n\n    // pick word and pick category\n    const { word, category } = pickWordAndCategory();\n\n    // create an aray of letters\n    let wordLetters = word.split(\"\");\n\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n\n    // fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setSco\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process the letter input\n  const verifyLetter = (letter) => {\n    const normalizedLetter = letter.toLowerCase();\n\n    // check if letter has already been utilized\n    if (\n      guessedLetters.includes(normalizedLetter) ||\n      wrongLetters.includes(normalizedLetter)\n    ) {\n      return;\n    }\n\n    //push guessed letter or remove a guess\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters((actualGuessedLetters) => [\n        ...actualGuessedLetters,\n        normalizedLetter\n      ])\n    } else {\n      setWrongLetters((actualWrongLetters) => [\n        ...actualWrongLetters,\n        normalizedLetter,\n      ]);\n\n      setGuesses((actualGuesses) => actualGuesses - 1);\n    }\n  };\n  \n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  // check if guesses ended\n  useEffect(() => {\n    if(guesses <= 0) {\n      // reset all states\n      clearLetterStates();\n\n      setGameStage(stages[2].name);\n    }\n  }, [guesses]);\n\n  // check win condition\n  useEffect(() => {\n\n    const uniqueLetters = [...new Set(letters)];\n\n    // win condition\n    if(guessedLetters.length === uniqueLetters.length) {\n      // add score\n      setScore((actualScore) => (actualScore += 100));\n\n      // restart game with new word\n      startGame();\n    }\n  }, [guessedLetters, letters, startGame]);\n\n  // restarts the game\n  const retry = () => {\n    setScore(0);\n    setGuesses(guessesQty);\n\n    setGameStage(stages[0].name);\n  };\n\n  return (\n    <div className=\"App\">\n      {gameStage === \"start\" && <StartScreen startGame={startGame} />}\n      {gameStage === \"game\" && (\n        <Game\n          verifyLetter={verifyLetter}\n          pickedWord={pickedWord}\n          pickedCategory={pickedCategory}\n          letters={letters}\n          guessedLetters={guessedLetters}\n          wrongLetters={wrongLetters}\n          guesses={guesses}\n          score={score}\n        />\n      )}\n      {gameStage === \"end\" && <GameOver retry={retry} score={score}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}